purpose: EHCI USB Controller control pipe transaction processing

hex
headers

\ Local temporary variables (common for control, bulk & interrupt)

\ my-dev and my-real-dev are created here to deal with set-address.
\ Normally my-dev and my-real-dev are both of the value of target.
\ However, during set-address, target=my-dev=0, my-real-dev is the
\ address to be assigned to my-real-dev.  The correct path to get
\ a device's characteristics is via my-real-dev.

0 value my-dev					\ Equals to target
1A58828 	 0 6D 79 2D 64 65 76 86 
1A58830 	14 88 A5  1 50 40 A0  1 
1A58838 	2C  F  0  0 
0 value my-real-dev				\ Path to dev's characteristics
1A5883C 	6D 79 2D 72 
1A58840 	65 61 6C 2D 64 65 76 8B 
1A58848 	34 88 A5  1 50 40 A0  1 
1A58850 	30  F  0  0 
0 value my-dev/pipe				\ Device/pipe for ED
1A58854 	6D 79 2D 64 
1A58858 	65 76 2F 70 69 70 65 8B 
1A58860 	4C 88 A5  1 50 40 A0  1 
1A58868 	34  F  0  0 

0 value my-speed				\ Speed of my-real-dev
1A5886C 	 0  0  0 6D 
1A58870 	79 2D 73 70 65 65 64 88 
1A58878 	64 88 A5  1 50 40 A0  1 
1A58880 	38  F  0  0 
0 value my-maxpayload				\ Pipe's max payload
1A58884 	 0  0 6D 79 
1A58888 	2D 6D 61 78 70 61 79 6C 
1A58890 	6F 61 64 8D 7C 88 A5  1 
1A58898 	50 40 A0  1 3C  F  0  0 

0 value my-#qtds				\ # of input or output qTDs
1A588A0 	 0  0  0 6D 79 2D 23 71 
1A588A8 	74 64 73 88 98 88 A5  1 
1A588B0 	50 40 A0  1 40  F  0  0 

0 value my-buf					\ Virtual address of data buffer
1A588B8 	 0 6D 79 2D 62 75 66 86 
1A588C0 	B0 88 A5  1 50 40 A0  1 
1A588C8 	44  F  0  0 
0 value my-buf-phys				\ Physical address of data buffer
1A588CC 	6D 79 2D 62 
1A588D0 	75 66 2D 70 68 79 73 8B 
1A588D8 	C4 88 A5  1 50 40 A0  1 
1A588E0 	48  F  0  0 
0 value /my-buf					\ Size of data buffer
1A588E4 	2F 6D 79 2D 
1A588E8 	62 75 66 87 DC 88 A5  1 
1A588F0 	50 40 A0  1 4C  F  0  0 
0 value my-dir					\ Direction (in or out)
1A588F8 	 0 6D 79 2D 64 69 72 86 
1A58900 	F0 88 A5  1 50 40 A0  1 
1A58908 	50  F  0  0 

0 value my-qtd					\ Current TD head
1A5890C 	 0 6D 79 2D 
1A58910 	71 74 64 86  4 89 A5  1 
1A58918 	50 40 A0  1 54  F  0  0 
0 value my-qh					\ Current QH
1A58920 	 0  0 6D 79 2D 71 68 85 
1A58928 	18 89 A5  1 50 40 A0  1 
1A58930 	58  F  0  0 

: set-real-dev  ( real-dev target -- )		\ For set-address only
1A58934 	 0  0  0 73 
1A58938 	65 74 2D 72 65 61 6C 2D 
1A58940 	64 65 76 8C 2C 89 A5  1 
1A58948 	20 40 A0  1 
   to my-dev to my-real-dev
1A5894C 	B8 40 A0  1 
1A58950 	34 88 A5  1 B8 40 A0  1 
1A58958 	4C 88 A5  1 
;
1A5895C 	58 46 A0  1 
\- set-my-dev defer set-my-dev

: set-my-char  ( pipe -- )
1A58960 	73 65 74 2D 6D 79 2D 63 
1A58968 	68 61 72 8B 48 89 A5  1 
1A58970 	20 40 A0  1 
   dup 8 << my-dev or to my-dev/pipe		( pipe )
1A58974 	40 49 A0  1 
1A58978 	F0 6F A0  1 C8 44 A0  1 
1A58980 	34 88 A5  1 70 44 A0  1 
1A58988 	B8 40 A0  1 64 88 A5  1 
   my-real-dev dup di-speed@  to my-speed	( pipe dev )
1A58990 	4C 88 A5  1 40 49 A0  1 
1A58998 	10 42 A4  1 B8 40 A0  1 
1A589A0 	7C 88 A5  1 
   di-maxpayload@  to my-maxpayload		( )
1A589A4 	6C 43 A4  1 
1A589A8 	B8 40 A0  1 98 88 A5  1 
;
1A589B0 	58 46 A0  1 
: process-control-args  ( buf phy len -- )
1A589B4 	 0  0  0 70 
1A589B8 	72 6F 63 65 73 73 2D 63 
1A589C0 	6F 6E 74 72 6F 6C 2D 61 
1A589C8 	72 67 73 94 70 89 A5  1 
1A589D0 	20 40 A0  1 
   to /my-buf to my-buf-phys to my-buf
1A589D4 	B8 40 A0  1 
1A589D8 	F0 88 A5  1 B8 40 A0  1 
1A589E0 	DC 88 A5  1 B8 40 A0  1 
1A589E8 	C4 88 A5  1 
   clear-usb-error
1A589EC 	F8 3F A4  1 
   set-my-dev
1A589F0 	20 51 A4  1 
   0 set-my-char
1A589F4 	70 6F A0  1 
1A589F8 	70 89 A5  1 
;
1A589FC 	58 46 A0  1 

: alloc-control-qhqtds  ( extra-qtds -- )
1A58A00 	 0  0  0 61 6C 6C 6F 63 
1A58A08 	2D 63 6F 6E 74 72 6F 6C 
1A58A10 	2D 71 68 71 74 64 73 94 
1A58A18 	D0 89 A5  1 20 40 A0  1 
   >r						( r: extra-qtds )
1A58A20 	BC 45 A0  1 
   my-buf-phys /my-buf cal-#qtd dup to my-#qtds	( #data-qtds r: extra-qtds )
1A58A24 	DC 88 A5  1 
1A58A28 	F0 88 A5  1  0 78 A5  1 
1A58A30 	40 49 A0  1 B8 40 A0  1 
1A58A38 	B0 88 A5  1 
   dup r> + alloc-qhqtds  to my-qtd  to my-qh	( #data-qtds )
1A58A3C 	40 49 A0  1 
1A58A40 	D0 45 A0  1  4 45 A0  1 
1A58A48 	4C 75 A5  1 B8 40 A0  1 
1A58A50 	18 89 A5  1 B8 40 A0  1 
1A58A58 	2C 89 A5  1 
   if  data-timeout  else  nodata-timeout  then	( timeout )
1A58A5C 	DC 41 A0  1 
1A58A60 	10  0  0  0 14 3B A4  1 
1A58A68 	C8 41 A0  1  8  0  0  0 
1A58A70 	F8 3A A4  1 
   my-qh >qh-timeout l!				( )
1A58A74 	2C 89 A5  1 
1A58A78 	94 70 A5  1 7C 4D A0  1 
;
1A58A80 	58 46 A0  1 

: fill-qh  ( qh pipetype -- )
1A58A84 	66 69 6C 6C 
1A58A88 	2D 71 68 87 1C 8A A5  1 
1A58A90 	20 40 A0  1 
   my-speed  dup d# 12 <<			( qh pipetype speed endp-char )
1A58A94 	7C 88 A5  1 
1A58A98 	40 49 A0  1 58 41 A0  1 
1A58AA0 	 C  0  0  0 C8 44 A0  1 
   QH_TD_TOGGLE or my-dev/pipe or		( qh pipetype speed endp-char' )
1A58AA8 	F0 70 A5  1 70 44 A0  1 
1A58AB0 	64 88 A5  1 70 44 A0  1 
   swap speed-high =  if			( qh pipetype endp-char' )
1A58AB8 	68 49 A0  1 98 2E A4  1 
1A58AC0 	24 48 A0  1 DC 41 A0  1 
1A58AC8 	84  0  0  0 
      QH_TUNE_RL_HS or				( qh pipetype endp-char' )
1A58ACC 	2C 71 A5  1 
1A58AD0 	70 44 A0  1 
      swap  case				( qh endp-char pipetype )
1A58AD4 	68 49 A0  1 
         pt-ctrl  of  QH_MULT1  d#  64  endof	( qh endp-char endp-cap /max )
1A58AD8 	34 67 A5  1 48 43 A0  1 
1A58AE0 	18  0  0  0 60 71 A5  1 
1A58AE8 	58 41 A0  1 40  0  0  0 
1A58AF0 	6C 43 A0  1 38  0  0  0 
         pt-bulk  of  QH_MULT1  d# 512  endof	( qh endp-char endp-cap /max )
1A58AF8 	48 67 A5  1 48 43 A0  1 
1A58B00 	18  0  0  0 60 71 A5  1 
1A58B08 	58 41 A0  1  0  2  0  0 
1A58B10 	6C 43 A0  1 18  0  0  0 
         ( default )  >r QH_MULT1  my-maxpayload r>
1A58B18 	BC 45 A0  1 60 71 A5  1 
1A58B20 	98 88 A5  1 D0 45 A0  1 
						( qh endp-char endp-cap /max )
      endcase
1A58B28 	84 43 A0  1 
      d# 16 << rot or swap			( qh endp-char endp-cap )
1A58B2C 	58 41 A0  1 
1A58B30 	10  0  0  0 C8 44 A0  1 
1A58B38 	7C 49 A0  1 70 44 A0  1 
1A58B40 	68 49 A0  1 
   else						( qh pipetype endp-char )
1A58B44 	C8 41 A0  1 
1A58B48 	70  0  0  0 
      swap pt-ctrl =  if  QH_CTRL_ENDP or  then	( qh endp-char' )
1A58B4C 	68 49 A0  1 
1A58B50 	34 67 A5  1 24 48 A0  1 
1A58B58 	DC 41 A0  1  C  0  0  0 
1A58B60 	C0 70 A5  1 70 44 A0  1 
      my-maxpayload d# 16 << or			( qh endp-char' )
1A58B68 	98 88 A5  1 58 41 A0  1 
1A58B70 	10  0  0  0 C8 44 A0  1 
1A58B78 	70 44 A0  1 
      QH_TUNE_RL_TT or				( qh endp-char' )
1A58B7C 	48 71 A5  1 
1A58B80 	70 44 A0  1 
      QH_MULT1					( qh endp-char endp-cap )
1A58B84 	60 71 A5  1 
      my-real-dev di-port@ d# 23 << or		( qh endp-char endp-cap' )
1A58B88 	4C 88 A5  1 98 42 A4  1 
1A58B90 	58 41 A0  1 17  0  0  0 
1A58B98 	C8 44 A0  1 70 44 A0  1 
      my-real-dev di-hub@ d# 16 << or		( qh endp-char endp-cap' )
1A58BA0 	4C 88 A5  1 50 42 A4  1 
1A58BA8 	58 41 A0  1 10  0  0  0 
1A58BB0 	C8 44 A0  1 70 44 A0  1 
   then						( qh endp-char endp-cap )
   2 pick >hcqh-endp-cap le-l!			( qh endp-char )
1A58BB8 	90 6F A0  1  C 4A A0  1 
1A58BC0 	40 6F A5  1 5C 35 A4  1 
   swap >hcqh-endp-char le-l!			( )
1A58BC8 	68 49 A0  1 24 6F A5  1 
1A58BD0 	5C 35 A4  1 
;
1A58BD4 	58 46 A0  1 

: fill-setup-qtd  ( sbuf sphys slen -- )
1A58BD8 	 0 66 69 6C 6C 2D 73 65 
1A58BE0 	74 75 70 2D 71 74 64 8E 
1A58BE8 	90 8A A5  1 20 40 A0  1 
   dup d# 16 << TD_TOGGLE_DATA0 or TD_C_ERR3 or TD_PID_SETUP or TD_STAT_ACTIVE or
1A58BF0 	40 49 A0  1 58 41 A0  1 
1A58BF8 	10  0  0  0 C8 44 A0  1 
1A58C00 	34 6C A5  1 70 44 A0  1 
1A58C08 	E4 6C A5  1 70 44 A0  1 
1A58C10 	30 6D A5  1 70 44 A0  1 
1A58C18 	68 6D A5  1 70 44 A0  1 
   my-qtd tuck >hcqtd-token le-l!
1A58C20 	18 89 A5  1 E8 46 A0  1 
1A58C28 	80 6A A5  1 5C 35 A4  1 
   fill-qtd-bptrs  drop
1A58C30 	50 78 A5  1 30 49 A0  1 
;
1A58C38 	58 46 A0  1 

: my-buf++  ( len -- )
1A58C3C 	 0  0  0 6D 
1A58C40 	79 2D 62 75 66 2B 2B 88 
1A58C48 	EC 8B A5  1 20 40 A0  1 
   /my-buf min				( len' )
1A58C50 	F0 88 A5  1 74 4A A0  1 
   /my-buf     over - to /my-buf	( len )
1A58C58 	F0 88 A5  1 54 49 A0  1 
1A58C60 	18 45 A0  1 B8 40 A0  1 
1A58C68 	F0 88 A5  1 
   my-buf-phys over + to my-buf-phys	( len )
1A58C6C 	DC 88 A5  1 
1A58C70 	54 49 A0  1  4 45 A0  1 
1A58C78 	B8 40 A0  1 DC 88 A5  1 
   my-buf      swap + to my-buf		( )
1A58C80 	C4 88 A5  1 68 49 A0  1 
1A58C88 	 4 45 A0  1 B8 40 A0  1 
1A58C90 	C4 88 A5  1 
;
1A58C94 	58 46 A0  1 
: fixup-last-qtd  ( td -- )
1A58C98 	 0 66 69 78 75 70 2D 6C 
1A58CA0 	61 73 74 2D 71 74 64 8E 
1A58CA8 	4C 8C A5  1 20 40 A0  1 
   /my-buf  if  drop exit  then
1A58CB0 	F0 88 A5  1 DC 41 A0  1 
1A58CB8 	 C  0  0  0 30 49 A0  1 
1A58CC0 	40 46 A0  1 
   dup >hcqtd-next le-l@ swap >hcqtd-next-alt le-l!
1A58CC4 	40 49 A0  1 
1A58CC8 	48 6A A5  1 C4 34 A4  1 
1A58CD0 	68 49 A0  1 64 6A A5  1 
1A58CD8 	5C 35 A4  1 
;
1A58CDC 	58 46 A0  1 
: fill-control-io-qtds  ( dir -- std )
1A58CE0 	 0  0  0 66 69 6C 6C 2D 
1A58CE8 	63 6F 6E 74 72 6F 6C 2D 
1A58CF0 	69 6F 2D 71 74 64 73 94 
1A58CF8 	AC 8C A5  1 20 40 A0  1 
   my-qtd >qtd-next l@				( dir qtd' )
1A58D00 	18 89 A5  1 6C 6B A5  1 
1A58D08 	6C 4C A0  1 
   my-#qtds 0  ?do				( dir qtd )
1A58D0C 	B0 88 A5  1 
1A58D10 	70 6F A0  1 50 42 A0  1 
1A58D18 	9C  0  0  0 
      my-buf my-buf-phys /my-buf 3 pick fill-qtd-bptrs
1A58D1C 	C4 88 A5  1 
1A58D20 	DC 88 A5  1 F0 88 A5  1 
1A58D28 	A0 6F A0  1  C 4A A0  1 
1A58D30 	50 78 A5  1 
						( dir qtd /bptr )
      2 pick over d# 16 << or TD_C_ERR3 or TD_STAT_ACTIVE or
1A58D34 	90 6F A0  1 
1A58D38 	 C 4A A0  1 54 49 A0  1 
1A58D40 	58 41 A0  1 10  0  0  0 
1A58D48 	C8 44 A0  1 70 44 A0  1 
1A58D50 	E4 6C A5  1 70 44 A0  1 
1A58D58 	68 6D A5  1 70 44 A0  1 
						( dir qtd /bptr token )
      i 1 and  if  TD_TOGGLE_DATA0  else TD_TOGGLE_DATA1  then  or
1A58D60 	B4 42 A0  1 80 6F A0  1 
1A58D68 	5C 44 A0  1 DC 41 A0  1 
1A58D70 	10  0  0  0 34 6C A5  1 
1A58D78 	C8 41 A0  1  8  0  0  0 
1A58D80 	50 6C A5  1 70 44 A0  1 
						( dir qtd /bptr token' )
      2 pick >hcqtd-token le-l!			( dir qtd /bptr )
1A58D88 	90 6F A0  1  C 4A A0  1 
1A58D90 	80 6A A5  1 5C 35 A4  1 
      my-buf++					( dir qtd )
1A58D98 	4C 8C A5  1 
      dup fixup-last-qtd			( dir qtd )
1A58D9C 	40 49 A0  1 
1A58DA0 	AC 8C A5  1 
      >qtd-next l@				( dir qtd' )
1A58DA4 	6C 6B A5  1 
1A58DA8 	6C 4C A0  1 
   loop  nip					( std )
1A58DAC 	F8 41 A0  1 
1A58DB0 	6C FF FF FF FC 46 A0  1 
;
1A58DB8 	58 46 A0  1 


\ ---------------------------------------------------------------------------
\ CONTROL pipe operations
\ ---------------------------------------------------------------------------

: (control-get)  ( sbuf sphy slen buf phy len -- actual usberr )
1A58DBC 	 0  0 28 63 
1A58DC0 	6F 6E 74 72 6F 6C 2D 67 
1A58DC8 	65 74 29 8D FC 8C A5  1 
1A58DD0 	20 40 A0  1 
   process-control-args				( sbuf sphy slen )
1A58DD4 	D0 89 A5  1 
   /my-buf 0=  if  3drop 0 USB_ERR_INV_OP exit  then
1A58DD8 	F0 88 A5  1 24 47 A0  1 
1A58DE0 	DC 41 A0  1 14  0  0  0 
1A58DE8 	A4 3E A4  1 70 6F A0  1 
1A58DF0 	E0 2D A4  1 40 46 A0  1 
   2 alloc-control-qhqtds			( sbuf sphy slen )
1A58DF8 	90 6F A0  1 1C 8A A5  1 

   \ SETUP TD
   fill-setup-qtd				( )
1A58E00 	EC 8B A5  1 

   \ IN TD
   TD_PID_IN fill-control-io-qtds		( std )
1A58E04 	14 6D A5  1 
1A58E08 	FC 8C A5  1 

   \ Status TD (OUT)
   TD_TOGGLE_DATA1 TD_C_ERR3 or TD_PID_OUT or TD_STAT_ACTIVE or
1A58E0C 	50 6C A5  1 
1A58E10 	E4 6C A5  1 70 44 A0  1 
1A58E18 	FC 6C A5  1 70 44 A0  1 
1A58E20 	68 6D A5  1 70 44 A0  1 
   swap >hcqtd-token le-l!			( )
1A58E28 	68 49 A0  1 80 6A A5  1 
1A58E30 	5C 35 A4  1 

   \ Start control transaction
   my-qh pt-ctrl fill-qh
1A58E34 	2C 89 A5  1 
1A58E38 	34 67 A5  1 90 8A A5  1 
   my-qh interrupt-on-last-td
1A58E40 	2C 89 A5  1 5C 7A A5  1 
   my-qh insert-qh
1A58E48 	2C 89 A5  1 C4 7A A5  1 

   \ Process results
   my-qh done-error?  if			( )
1A58E50 	2C 89 A5  1 F8 84 A5  1 
1A58E58 	DC 41 A0  1 10  0  0  0 
      0						( actual )	\ System error, timeout, or USB error
1A58E60 	70 6F A0  1 
   else						( )
1A58E64 	C8 41 A0  1 
1A58E68 	40  0  0  0 
      my-qtd >qtd-next l@ dup my-#qtds get-actual	( qtd actual )
1A58E6C 	18 89 A5  1 
1A58E70 	6C 6B A5  1 6C 4C A0  1 
1A58E78 	40 49 A0  1 B0 88 A5  1 
1A58E80 	AC 85 A5  1 
      over >qtd-buf l@ rot >qtd-pbuf l@ 2 pick dma-pull	( actual )
1A58E84 	54 49 A0  1 
1A58E88 	84 6B A5  1 6C 4C A0  1 
1A58E90 	7C 49 A0  1 9C 6B A5  1 
1A58E98 	6C 4C A0  1 90 6F A0  1 
1A58EA0 	 C 4A A0  1 34 36 A4  1 
   then						( actual )

   my-qh dup remove-qh  free-qh			( actual )
1A58EA8 	2C 89 A5  1 40 49 A0  1 
1A58EB0 	28 7C A5  1  0 75 A5  1 
   usb-error					( actual usberr )
1A58EB8 	DC 3F A4  1 
;
1A58EBC 	58 46 A0  1 

: run-control  ( -- usberr )
1A58EC0 	72 75 6E 2D 63 6F 6E 74 
1A58EC8 	72 6F 6C 8B D0 8D A5  1 
1A58ED0 	20 40 A0  1 
   \ Start control transaction
   my-qh pt-ctrl fill-qh
1A58ED4 	2C 89 A5  1 
1A58ED8 	34 67 A5  1 90 8A A5  1 
   my-qh interrupt-on-last-td
1A58EE0 	2C 89 A5  1 5C 7A A5  1 
   my-qh insert-qh
1A58EE8 	2C 89 A5  1 C4 7A A5  1 

   \ Process results
   my-qh done-error?                ( usberr )
1A58EF0 	2C 89 A5  1 F8 84 A5  1 
   my-qh dup remove-qh  free-qh     ( usberr )
1A58EF8 	2C 89 A5  1 40 49 A0  1 
1A58F00 	28 7C A5  1  0 75 A5  1 
;
1A58F08 	58 46 A0  1 

: (control-set)  ( sbuf sphy slen buf phy len -- usberr )
1A58F0C 	 0  0 28 63 
1A58F10 	6F 6E 74 72 6F 6C 2D 73 
1A58F18 	65 74 29 8D D0 8E A5  1 
1A58F20 	20 40 A0  1 
   process-control-args				( sbuf sphy slen )
1A58F24 	D0 89 A5  1 
   2 alloc-control-qhqtds			( sbuf sphy slen )
1A58F28 	90 6F A0  1 1C 8A A5  1 

   \ SETUP TD
   fill-setup-qtd				( )
1A58F30 	EC 8B A5  1 

   \ OUT TD
   TD_PID_OUT fill-control-io-qtds		( std )
1A58F34 	FC 6C A5  1 
1A58F38 	FC 8C A5  1 

   \ Status TD (IN)
   TD_TOGGLE_DATA1 TD_C_ERR3 or TD_PID_IN or TD_STAT_ACTIVE or
1A58F3C 	50 6C A5  1 
1A58F40 	E4 6C A5  1 70 44 A0  1 
1A58F48 	14 6D A5  1 70 44 A0  1 
1A58F50 	68 6D A5  1 70 44 A0  1 
   swap >hcqtd-token le-l!			( )
1A58F58 	68 49 A0  1 80 6A A5  1 
1A58F60 	5C 35 A4  1 

   run-control
1A58F64 	D0 8E A5  1 
;
1A58F68 	58 46 A0  1 

: (control-set-nostat)  ( sbuf sphy slen buf phy len -- usberr )
1A58F6C 	 0  0  0 28 
1A58F70 	63 6F 6E 74 72 6F 6C 2D 
1A58F78 	73 65 74 2D 6E 6F 73 74 
1A58F80 	61 74 29 94 20 8F A5  1 
1A58F88 	20 40 A0  1 
   process-control-args				( sbuf sphy slen )
1A58F8C 	D0 89 A5  1 
   1 alloc-control-qhqtds			( sbuf sphy slen )
1A58F90 	80 6F A0  1 1C 8A A5  1 

   \ SETUP TD
   fill-setup-qtd				( )
1A58F98 	EC 8B A5  1 

   \ OUT TD
   TD_PID_OUT fill-control-io-qtds drop		( )
1A58F9C 	FC 6C A5  1 
1A58FA0 	FC 8C A5  1 30 49 A0  1 

   run-control                                  ( usberr )
1A58FA8 	D0 8E A5  1 
;
1A58FAC 	58 46 A0  1 

headers
