\ Implementation of the device driver interface used by the DOS file
\ system code.  This file knows some details of both the underlying
\ device level and the DOS file level above.  It is responsible for
\ translating between those levels; for instance, it translates DOS
\ device numbers to the corresponding SCSI logical unit numbers.
\
\ Exports:
\
\   read-sectors   (S sector# #sectors addr -- error? )   Reads sectors
\   write-sectors  (S sector# #sectors addr -- error? )   Writes sectors
\   r/w-sectors  (S sector# #sectors addr lun read? -- error? )
\
\ Imports:
\   current-device

\ mmo private

: init-sector-size  ( -- )  " block-size" $call-parent  bps w!  ;
1A2BD84 	 0  0  0 69 
1A2BD88 	6E 69 74 2D 73 65 63 74 
1A2BD90 	6F 72 2D 73 69 7A 65 90 
1A2BD98 	68 BD A2  1 20 40 A0  1 
1A2BDA0 	9C 53 A0  1  A 62 6C 6F 
1A2BDA8 	63 6B 2D 73 69 7A 65  0 
1A2BDB0 	DC 31 A2  1 34 BC A2  1 
1A2BDB8 	A4 4D A0  1 58 46 A0  1 
: translate-params  (S sector# #sectors addr -- addr #bytes )
1A2BDC0 	 0  0  0 74 72 61 6E 73 
1A2BDC8 	6C 61 74 65 2D 70 61 72 
1A2BDD0 	61 6D 73 90 9C BD A2  1 
1A2BDD8 	20 40 A0  1 
   rot bps w@ um*  " seek"  $call-parent  ( #sectors addr err? )
1A2BDDC 	7C 49 A0  1 
1A2BDE0 	34 BC A2  1 94 4C A0  1 
1A2BDE8 	50 5D A0  1 9C 53 A0  1 
1A2BDF0 	 4 73 65 65 6B  0  0  0 
1A2BDF8 	DC 31 A2  1 
   abort" seek failed in translate-params" 
1A2BDFC 	 8 81 A0  1 
1A2BE00 	1F 73 65 65 6B 20 66 61 
1A2BE08 	69 6C 65 64 20 69 6E 20 
1A2BE10 	74 72 61 6E 73 6C 61 74 
1A2BE18 	65 2D 70 61 72 61 6D 73 
1A2BE20 	 0  0  0  0 
   swap bps w@ *
1A2BE24 	68 49 A0  1 
1A2BE28 	34 BC A2  1 94 4C A0  1 
1A2BE30 	1C 5F A0  1 
;
1A2BE34 	58 46 A0  1 

: read-sectors   (S sector# #sectors addr -- error? )
1A2BE38 	 0  0  0 72 65 61 64 2D 
1A2BE40 	73 65 63 74 6F 72 73 8C 
1A2BE48 	D8 BD A2  1 20 40 A0  1 
   translate-params  dup >r  " read"  $call-parent  r> <>
1A2BE50 	D8 BD A2  1 40 49 A0  1 
1A2BE58 	BC 45 A0  1 9C 53 A0  1 
1A2BE60 	 4 72 65 61 64  0  0  0 
1A2BE68 	DC 31 A2  1 D0 45 A0  1 
1A2BE70 	44 48 A0  1 
;
1A2BE74 	58 46 A0  1 
: write-sectors  (S sector# #sectors addr -- error? )
1A2BE78 	 0  0 77 72 69 74 65 2D 
1A2BE80 	73 65 63 74 6F 72 73 8D 
1A2BE88 	4C BE A2  1 20 40 A0  1 
   translate-params  dup >r  " write"  $call-parent  r> <>
1A2BE90 	D8 BD A2  1 40 49 A0  1 
1A2BE98 	BC 45 A0  1 9C 53 A0  1 
1A2BEA0 	 5 77 72 69 74 65  0  0 
1A2BEA8 	DC 31 A2  1 D0 45 A0  1 
1A2BEB0 	44 48 A0  1 
;
1A2BEB4 	58 46 A0  1 

[ifdef] mount-drive
4 constant #devices

string-array device-names
  ," /floppy"
  ," /floppy"
  ," disk0"
  ," disk1"
end-string-array

: ?drive#  ( drive# -- drive# )
   dup 0 #devices  within  ( drive-number okay? )
   0=  abort" Maximum drive number is 3 (D:)"
;
: (unmount)  ( drive# -- )
   ?drive#
   driver @  dup  if  ( ihandle )
      close-dev  0 driver !
   else
      2drop
   then
;
: get-drive#  \ drive-letter  ( -- true | drive# false )
   optional-arg$  dup  if
      drop c@  upc  ascii A -  false
   else
      2drop true
   then
;
: unmount  \ drive-letter  ( -- )
   get-drive#  abort" Usage: unmount drive-letter"
   (unmount)
;
: $mount  ( path$ drive# -- )
   dup (unmount)   >r   ( path$ )
   open-dev  dup  0= abort" Can't open disk device for mounting"  ( ihandle )
   r> driver !
;   
: mount  \ pathname drive-letter  ( -- )
   safe-parse-word  dup  if  ( path$ )
      get-drive#            ( path$ [ drive# ] flag )
   else
      true
   then                     ( path$ [ drive# ] flag )
   abort" Usage: mount pathname drive-letter"
   $mount
;
: ?init-device  ( -- )
   driver @ 0=  if
      current-device @  device-names  count  current-device @  $mount
   then
;
[else]
alias ?init-device noop  ( -- )
1A2BEB8 	 0  0  0 3F 69 6E 69 74 
1A2BEC0 	2D 64 65 76 69 63 65 AC 
1A2BEC8 	8C BE A2  1 64 4F A0  1 
[then]
