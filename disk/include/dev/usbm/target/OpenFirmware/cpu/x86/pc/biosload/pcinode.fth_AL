purpose: PCI bus package

\ For the PVI-486AP4 board with the i82425/5 chipset
\ wrong for most hardware...
\ what should this be for a generic system?
\ h# 1800 encode-int  " slave-only" property
\ h# 1e00 encode-int			\ Mask of implemented add-in slots
\ " PCI-1"           encode-string encode+
\ " PCI-2"           encode-string encode+ 
\ " PCI-3"           encode-string encode+
\ " PCI-4"           encode-string encode+

\ For the PicoPower 550/560/570 motherboard
\ wrong for most hardware...
\ what should this be for a generic system?  No such thing
h# 1000 encode-int  " slave-only" property
1A38044 	 0  0 10  0 
1A38048 	 0 73 6C 61 76 65 2D 6F 
1A38050 	6E 6C 79 8A 38 80 A3  1 
1A38058 	BC 13 A2  1 18  0  0  0 
1A38060 	 4  0  0  0 
h# 1800 encode-int			\ Mask of implemented add-in slots
1A38064 	 0  0 18  0 
" PCI-1"           encode-string encode+
1A38068 	50 43 49 2D 31  0 
" PCI-2"           encode-string encode+
1A3806E 	50 43 
1A38070 	49 2D 32  0 
" PCI-3"           encode-string encode+
1A38074 	50 43 49 2D 
1A38078 	33  0 

" slot-names" property
1A3807A 	 0  0  0 73 6C 6F 
1A38080 	74 2D 6E 61 6D 65 73 8A 
1A38088 	58 80 A3  1 BC 13 A2  1 
1A38090 	2C  0  0  0 16  0  0  0 

also forth definitions


\ unknown hardware, so probe all low slots
\ note: could hang some systems
\ note: some systems might have devices 0..1f

previous definitions

h# 1000.0000 to first-mem		\ Avoid RAM at low addresses
h# 2000.0000 to mem-space-top
h# 0000.8000 to first-io		\ Avoid mappings established by BIOS

defer config-setup
1A38098 	 0  0  0 63 6F 6E 66 69 
1A380A0 	67 2D 73 65 74 75 70 8C 
1A380A8 	B8 7F A3  1 5C 40 A0  1 
1A380B0 	F0  A  0  0 
defer config-done
1A380B4 	63 6F 6E 66 
1A380B8 	69 67 2D 64 6F 6E 65 8B 
1A380C0 	AC 80 A3  1 5C 40 A0  1 
1A380C8 	F4  A  0  0 

\ Configuration mechanism #1 as defined in the PCI spec.
: config-setup1  ( config-adr -- vaddr )
1A380CC 	 0  0 63 6F 
1A380D0 	6E 66 69 67 2D 73 65 74 
1A380D8 	75 70 31 8D C4 80 A3  1 
1A380E0 	20 40 A0  1 
   \ Bit 31 ("enable") must be 1, bits 30:24 ("reserved") must be 0,
   \ bits 1:0 must be 0.
   dup h# ff.fffc and  h# 8000.0000 or  h# cf8 pl!  ( config-adr )
1A380E4 	40 49 A0  1 
1A380E8 	58 41 A0  1 FC FF FF  0 
1A380F0 	5C 44 A0  1 58 41 A0  1 
1A380F8 	 0  0  0 80 70 44 A0  1 
1A38100 	58 41 A0  1 F8  C  0  0 
1A38108 	10 82 A2  1 

   3 and  h# cfc +  \ Merge in the byte selector bits
1A3810C 	A0 6F A0  1 
1A38110 	5C 44 A0  1 58 41 A0  1 
1A38118 	FC  C  0  0  4 45 A0  1 
;
1A38120 	58 46 A0  1 

\ These versions of config-x@/! are for "configuration mechanism #2"
\ as described in the PCI design guide.  That mechanism is not the
\ recommended one, but several PC PCI chipsets use it.

: config-setup2  ( bus#|dev#|function|reg# -- port-adr )
1A38124 	 0  0 63 6F 
1A38128 	6E 66 69 67 2D 73 65 74 
1A38130 	75 70 32 8D E0 80 A3  1 
1A38138 	20 40 A0  1 
   \ XXX For now, we ignore the bus number
   \ Write function number and "access config space" key to the config
   \ space enable register
   dup 7 >> h# e and  h# 10 or  h# cf8 pc!  ( bus#|dev#|function#|reg#)
1A3813C 	40 49 A0  1 
1A38140 	E0 6F A0  1 DC 44 A0  1 
1A38148 	58 41 A0  1  E  0  0  0 
1A38150 	5C 44 A0  1 58 41 A0  1 
1A38158 	10  0  0  0 70 44 A0  1 
1A38160 	58 41 A0  1 F8  C  0  0 
1A38168 	E8 81 A2  1 
   dup h# ff and  swap d# 11 >> h# f and 8 <<  or  h# c000 or
1A3816C 	40 49 A0  1 
1A38170 	58 41 A0  1 FF  0  0  0 
1A38178 	5C 44 A0  1 68 49 A0  1 
1A38180 	58 41 A0  1  B  0  0  0 
1A38188 	DC 44 A0  1 58 41 A0  1 
1A38190 	 F  0  0  0 5C 44 A0  1 
1A38198 	F0 6F A0  1 C8 44 A0  1 
1A381A0 	70 44 A0  1 58 41 A0  1 
1A381A8 	 0 C0  0  0 70 44 A0  1 
;
1A381B0 	58 46 A0  1 
: config-done2  ( -- )  0 h# cf8 pc!  ; 
1A381B4 	 0  0  0 63 
1A381B8 	6F 6E 66 69 67 2D 64 6F 
1A381C0 	6E 65 32 8C 38 81 A3  1 
1A381C8 	20 40 A0  1 70 6F A0  1 
1A381D0 	58 41 A0  1 F8  C  0  0 
1A381D8 	E8 81 A2  1 58 46 A0  1 

: config-b@  ( config-adr -- b )  config-setup pc@ config-done  ;
1A381E0 	 0  0 63 6F 6E 66 69 67 
1A381E8 	2D 62 40 89 C8 81 A3  1 
1A381F0 	20 40 A0  1 AC 80 A3  1 
1A381F8 	AC 81 A2  1 C4 80 A3  1 
1A38200 	58 46 A0  1 
: config-w@  ( config-adr -- w )  config-setup pw@ config-done  ;
1A38204 	 0  0 63 6F 
1A38208 	6E 66 69 67 2D 77 40 89 
1A38210 	F0 81 A3  1 20 40 A0  1 
1A38218 	AC 80 A3  1 C0 81 A2  1 
1A38220 	C4 80 A3  1 58 46 A0  1 
: config-l@  ( config-adr -- l )  config-setup pl@ config-done  ;
1A38228 	 0  0 63 6F 6E 66 69 67 
1A38230 	2D 6C 40 89 14 82 A3  1 
1A38238 	20 40 A0  1 AC 80 A3  1 
1A38240 	D4 81 A2  1 C4 80 A3  1 
1A38248 	58 46 A0  1 
: config-b!  ( b config-adr -- )  config-setup pc! config-done  ;
1A3824C 	 0  0 63 6F 
1A38250 	6E 66 69 67 2D 62 21 89 
1A38258 	38 82 A3  1 20 40 A0  1 
1A38260 	AC 80 A3  1 E8 81 A2  1 
1A38268 	C4 80 A3  1 58 46 A0  1 
: config-w!  ( w config-adr -- )  config-setup pw! config-done  ;
1A38270 	 0  0 63 6F 6E 66 69 67 
1A38278 	2D 77 21 89 5C 82 A3  1 
1A38280 	20 40 A0  1 AC 80 A3  1 
1A38288 	FC 81 A2  1 C4 80 A3  1 
1A38290 	58 46 A0  1 
: config-l!  ( l config-adr -- )  config-setup pl! config-done  ;
1A38294 	 0  0 63 6F 
1A38298 	6E 66 69 67 2D 6C 21 89 
1A382A0 	80 82 A3  1 20 40 A0  1 
1A382A8 	AC 80 A3  1 10 82 A2  1 
1A382B0 	C4 80 A3  1 58 46 A0  1 

: mechanism1   ( -- )
1A382B8 	 0 6D 65 63 68 61 6E 69 
1A382C0 	73 6D 31 8A A4 82 A3  1 
1A382C8 	20 40 A0  1 
   ['] config-setup1 to config-setup
1A382CC 	60 53 A0  1 
1A382D0 	E0 80 A3  1 98 40 A0  1 
1A382D8 	AC 80 A3  1 
   ['] noop          to config-done
1A382DC 	60 53 A0  1 
1A382E0 	64 4F A0  1 98 40 A0  1 
1A382E8 	C4 80 A3  1 
;
1A382EC 	58 46 A0  1 
mechanism1
: mechanism2   ( -- )
1A382F0 	 0 6D 65 63 68 61 6E 69 
1A382F8 	73 6D 32 8A C8 82 A3  1 
1A38300 	20 40 A0  1 
   ['] config-setup2 to config-setup
1A38304 	60 53 A0  1 
1A38308 	38 81 A3  1 98 40 A0  1 
1A38310 	AC 80 A3  1 
   ['] config-done2  to config-done
1A38314 	60 53 A0  1 
1A38318 	C8 81 A3  1 98 40 A0  1 
1A38320 	C4 80 A3  1 
;
1A38324 	58 46 A0  1 

\ !!! assumes a device in either slot 0 or slot 1 !!!
\ and that failed reads return -1.
: init  ( -- )
1A38328 	 0  0  0 69 6E 69 74 84 
1A38330 	 0 83 A3  1 20 40 A0  1 
   mechanism1
1A38338 	C8 82 A3  1 
   0 config-l@  -1 =  h# 800 config-l@  -1 =  and  if
1A3833C 	70 6F A0  1 
1A38340 	38 82 A3  1 58 41 A0  1 
1A38348 	FF FF FF FF 24 48 A0  1 
1A38350 	58 41 A0  1  0  8  0  0 
1A38358 	38 82 A3  1 58 41 A0  1 
1A38360 	FF FF FF FF 24 48 A0  1 
1A38368 	5C 44 A0  1 DC 41 A0  1 
1A38370 	 8  0  0  0 
      mechanism2
1A38374 	 0 83 A3  1 
\      h# 0000.5000  to first-io    \ Avoid on-board SCSI chip's BIOS mapping 
\      " 3,4,5" to pci-probe-list
   then
;
1A38378 	58 46 A0  1 

\ Determine the parent interrupt information (the "interrupt line" in PCI
\ parlance) from the child's "interrupt pin" and the child's address,
\ returning "int-line true" if the child's interrupt line register should
\ be set or "false" otherwise.
: assign-int-line  ( phys.hi.func INTx -- irq true )
1A3837C 	61 73 73 69 
1A38380 	67 6E 2D 69 6E 74 2D 6C 
1A38388 	69 6E 65 8F 34 83 A3  1 
1A38390 	20 40 A0  1 
   \ Reiterate the value that is already in the int line register,
   \ which was presumably placed there by the BIOS
   drop  h# 3c +  config-b@  true
1A38394 	30 49 A0  1 
1A38398 	58 41 A0  1 3C  0  0  0 
1A383A0 	 4 45 A0  1 F0 81 A3  1 
1A383A8 	 4 70 A0  1 
;
1A383AC 	58 46 A0  1 

\ XXX we should keep a table of already-mapped addresses so that
\ successive map/unmaps of the same address will succeed.


\ The io-base handling really ought to be in the root node, but
\ that would require more changes than I'm willing to do at present.
warning @ warning off
: map-out  ( vaddr size -- )
1A383B0 	6D 61 70 2D 6F 75 74 87 
1A383B8 	90 83 A3  1 20 40 A0  1 
   over io-base u>=  if  2drop exit  then  ( vaddr size )
1A383C0 	54 49 A0  1 B4 37 A3  1 
1A383C8 	CC 48 A0  1 DC 41 A0  1 
1A383D0 	 C  0  0  0 AC 49 A0  1 
1A383D8 	40 46 A0  1 
   map-out                                 ( )
1A383DC 	70 7E A3  1 
;   
1A383E0 	58 46 A0  1 
warning !
