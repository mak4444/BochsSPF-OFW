
\ String-array
\ Creates an array of strings.
\ Used in the form:
\ string-array name
\   ," This is the first string in the table"
\   ," this is the second one"
\   ," and this is the third"
\ end-string-array
\
\ name is later executed as:
\
\ name ( index -- addr )
\   index is a number between 0 and one less than the number of strings in
\   the array.  addr is the address of the corresponding packed string.
\   if index is less than 0 or greater than or equal to the number of
\   strings in the array, name aborts with the message:
\        String array index out of range

decimal
headerless

: string-array  \ name ( -- )
1A11514 	 0  0  0 73 
1A11518 	74 72 69 6E 67 2D 61 72 
1A11520 	72 61 79 8C AC 14 A1  1 
1A11528 	20 40 A0  1 
   create
1A1152C 	A8 A2 A0  1 
   0 ,    ( the number of strings )
1A11530 	70 6F A0  1 98 55 A0  1 
   0 ,    ( the starting address of the pointer table )
1A11538 	70 6F A0  1 98 55 A0  1 
   does>  ( index pfa )
1A11540 	50 A3 A0  1 90 90 90 E8 
1A11548 	30 2B FF FF 
   2dup @ ( index pfa  index #strings )
1A1154C 	C0 49 A0  1 
1A11550 	5C 4C A0  1 
   0 swap within  0= abort" String array index out of range"    ( index pfa )
1A11554 	70 6F A0  1 
1A11558 	68 49 A0  1  8 71 A0  1 
1A11560 	24 47 A0  1  8 81 A0  1 
1A11568 	1F 53 74 72 69 6E 67 20 
1A11570 	61 72 72 61 79 20 69 6E 
1A11578 	64 65 78 20 6F 75 74 20 
1A11580 	6F 66 20 72 61 6E 67 65 
1A11588 	 0  0  0  0 
   tuck  dup na1+ @ +      ( pfa index table-address )
1A1158C 	E8 46 A0  1 
1A11590 	40 49 A0  1 CC 50 A0  1 
1A11598 	5C 4C A0  1  4 45 A0  1 
   swap na+  @ +           ( string-address )
1A115A0 	68 49 A0  1 48 50 A0  1 
1A115A8 	5C 4C A0  1  4 45 A0  1 
;
1A115B0 	58 46 A0  1 
: end-string-array ( -- )
1A115B4 	 0  0  0 65 
1A115B8 	6E 64 2D 73 74 72 69 6E 
1A115C0 	67 2D 61 72 72 61 79 90 
1A115C8 	28 15 A1  1 20 40 A0  1 
   here                ( string-end-addr )
1A115D0 	70 54 A0  1 
   lastacf >body       ( string-end-addr pfa )
1A115D4 	AC 57 A0  1 
1A115D8 	E4 59 A0  1 
   dup >r                 \ Remember pfa of word for use as the base address
1A115DC 	40 49 A0  1 
1A115E0 	BC 45 A0  1 
   na1+ here r@ - over !  \ Store table address in the second word of the pf
1A115E4 	CC 50 A0  1 
1A115E8 	70 54 A0  1 E4 45 A0  1 
1A115F0 	18 45 A0  1 54 49 A0  1 
1A115F8 	54 4D A0  1 
   na1+                ( string-end-addr first-string-addr )
1A115FC 	CC 50 A0  1 
   begin               ( string-end-addr this-string-addr )
       2dup >          ( string-end-addr this-string-addr )
1A11600 	C0 49 A0  1  4 48 A0  1 
   while
1A11608 	DC 41 A0  1 20  0  0  0 
       \ Store string address in table
       dup r@ - ,      ( string-end-addr this-string-addr )
1A11610 	40 49 A0  1 E4 45 A0  1 
1A11618 	18 45 A0  1 98 55 A0  1 
       \ Find next string address
       +str            ( string-end-addr next-string-addr )
1A11620 	18 8B A0  1 
   repeat              ( string-end-addr next-string-addr )
1A11624 	C8 41 A0  1 
1A11628 	D8 FF FF FF 
   2drop               ( )
1A1162C 	AC 49 A0  1 
   \ Calculate and store number of strings
   lastacf >body       ( pfa )
1A11630 	AC 57 A0  1 E4 59 A0  1 
   dup dup na1+ @ +    ( pfa table-addr )
1A11638 	40 49 A0  1 40 49 A0  1 
1A11640 	CC 50 A0  1 5C 4C A0  1 
1A11648 	 4 45 A0  1 
   here swap - /n /    ( pfa #strings )
1A1164C 	70 54 A0  1 
1A11650 	68 49 A0  1 18 45 A0  1 
1A11658 	40 51 A0  1 98 5F A0  1 
   swap !
1A11660 	68 49 A0  1 54 4D A0  1 
   r> drop
1A11668 	D0 45 A0  1 30 49 A0  1 
;
1A11670 	58 46 A0  1 
headers

